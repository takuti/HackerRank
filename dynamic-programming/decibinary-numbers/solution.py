#!/bin/python

import math
import os
import random
import re
import sys

#
# Complete the 'decibinaryNumbers' function below.
#
# The function is expected to return a LONG_INTEGER.
# The function accepts LONG_INTEGER x as parameter.
#

def to_db(v):
    digits = str(v)
    res = 0
    for i in range(len(digits)):
        res += int(digits[i]) * 2**(len(digits)-1-i)
    return res


"""Patterns
'  1,   2,   3,   5,   7,  11,  15,  21,  27,  36'
'  4,   6,   8,  12,  16,  22,  28,  37,  45,  56'
'  9,  13,  17,  23,  29,  38,  46,  57,  67,  81'
' 18,  24,  30,  39,  47,  58,  68,  82,  95, 111'
' 31,  40,  48,  59,  69,  83,  96, 112, 127, 146'
' 49,  60,  70,  84,  97, 113, 128, 147, 165, 186'
' 71,  85,  98, 114, 129, 148, 166, 187, 207, 229'
' 99, 115, 130, 149, 167, 188, 208, 230, 251, 273'
'131, 150, 168, 189, 209, 231, 252, 274, 295, 316'
'169, 190, 210, 232, 253, 275, 296, 317, 337, 356'
--------------------------------------------------
' 10,  14,  19,  25,  32,  41,  50,  61,  72,  86'
' 20,  26,  33,  42,  51,  62,  73,  87, 100, 116'
' 34,  43,  52,  63,  74,  88, 101, 117, 132, 151'
' 53,  64,  75,  89, 102, 118, 133, 152, 170, 191'
' 76,  90, 103, 119, 134, 153, 171, 192, 211, 233'
'104, 120, 135, 154, 172, 193, 212, 234, 254, 276'
'136, 155, 173, 194, 213, 235, 255, 277, 297, 318'
'174, 195, 214, 236, 256, 278, 298, 319, 338, 357'
'215, 237, 257, 279, 299, 320, 339, 358, 375, 391'
'258, 280, 300, 321, 340, 359, 376, 392, 407, 421'
--------------------------------------------------
' 35,  44,  54,  65,  77,  91, 105, 121, 137, 156'
' 55,  66,  78,  92, 106, 122, 138, 157, 175, 196'
' 79,  93, 107, 123, 139, 158, 176, 197, 216, 238'
'108, 124, 140, 159, 177, 198, 217, 239, 259, 281'
'141, 160, 178, 199, 218, 240, 260, 282, 301, 322'
'179, 200, 219, 241, 261, 283, 302, 323, 341, 360'
'220, 242, 262, 284, 303, 324, 342, 361, 377, 393'
'263, 285, 304, 325, 343, 362, 378, 394, 408, 422'
'305, 326, 344, 363, 379, 395, 409, 423, 435, 446'
'345, 364, 380, 396, 410, 424, 436, 447, 457, 466'
--------------------------------------------------
' 80,  94, 109, 125, 142, 161, 180, 201, 221, 243'
'110, 126, 143, 162, 181, 202, 222, 244, 264, 286'
'144, 163, 182, 203, 223, 245, 265, 287, 306, 327'
'183, 204, 224, 246, 266, 288, 307, 328, 346, 365'
'225, 247, 267, 289, 308, 329, 347, 366, 381, 397'
'268, 290, 309, 330, 348, 367, 382, 398, 411, 425'
'310, 331, 349, 368, 383, 399, 412, 426, 437, 448'
'350, 369, 384, 400, 413, 427, 438, 449, 458, 467'
'385, 401, 414, 428, 439, 450, 459, 468, 475, 481'
'415, 429, 440, 451, 460, 469, 476, 482, 487, 491'
--------------------------------------------------
'145, 164, 184, 205, 226, 248, 269, 291, 311, 332'
'185, 206, 227, 249, 270, 292, 312, 333, 351, 370'
'228, 250, 271, 293, 313, 334, 352, 371, 386, 402'
'272, 294, 314, 335, 353, 372, 387, 403, 416, 430'
'315, 336, 354, 373, 388, 404, 417, 431, 441, 452'
'355, 374, 389, 405, 418, 432, 442, 453, 461, 470'
'390, 406, 419, 433, 443, 454, 462, 471, 477, 483'
'420, 434, 444, 455, 463, 472, 478, 484, 488, 492'
'445, 456, 464, 473, 479, 485, 489, 493, 495, 497'
'465, 474, 480, 486, 490, 494, 496, 498, 499, 500'
"""


size = 10**6
dbs = sorted([(to_db(i), i) for i in range(0, size)])


def decibinaryNumbers(x):
    return dbs[x-1][1]


if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    q = int(raw_input().strip())

    for q_itr in xrange(q):
        x = int(raw_input().strip())

        result = decibinaryNumbers(x)

        fptr.write(str(result) + '\n')

    fptr.close()
